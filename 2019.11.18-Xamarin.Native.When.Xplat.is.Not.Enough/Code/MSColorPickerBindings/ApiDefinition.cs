using System;
using Foundation;
using ObjCRuntime;
using UIKit;

namespace MSColorPicker
{

    // @interface MSColorComponentView : UIControl
    [BaseType(typeof(UIControl))]
    interface MSColorComponentView
    {
        // @property (copy, nonatomic) NSString * title;
        [Export("title")]
        string Title { get; set; }

        // @property (assign, nonatomic) CGFloat value;
        [Export("value")]
        nfloat Value { get; set; }

        // @property (assign, nonatomic) CGFloat minimumValue;
        [Export("minimumValue")]
        nfloat MinimumValue { get; set; }

        // @property (assign, nonatomic) CGFloat maximumValue;
        [Export("maximumValue")]
        nfloat MaximumValue { get; set; }

        // @property (copy, nonatomic) NSString * format;
        [Export("format")]
        string Format { get; set; }

        // -(void)setColors:(NSArray *)colors __attribute__((nonnull(1)));
        [Export("setColors:")]
        void SetColors(NSObject[] colors);
    }

    // @protocol MSColorSelectionViewControllerDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MSColorSelectionViewControllerDelegate
    {
        // @required -(void)colorViewController:(MSColorSelectionViewController * _Nonnull)colorViewCntroller didChangeColor:(UIColor * _Nonnull)color;
        [Abstract]
        [Export("colorViewController:didChangeColor:")]
        void DidChangeColor(MSColorSelectionViewController colorViewCntroller, UIColor color);
    }

    // @interface MSColorSelectionViewController : UIViewController
    [BaseType(typeof(UIViewController))]
    interface MSColorSelectionViewController
    {
        [Wrap("WeakDelegate")]
        [NullAllowed]
        MSColorSelectionViewControllerDelegate Delegate { get; set; }

        // @property (nonatomic, weak) id<MSColorSelectionViewControllerDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
        NSObject WeakDelegate { get; set; }

        // @property (nonatomic, strong) UIColor * _Nonnull color;
        [Export("color", ArgumentSemantic.Strong)]
        UIColor Color { get; set; }
    }

    // @protocol MSColorView <NSObject>
    /*
      Check whether adding [Model] to this declaration is appropriate.
      [Model] is used to generate a C# class that implements this protocol,
      and might be useful for protocols that consumers are supposed to implement,
      since consumers can subclass the generated class instead of implementing
      the generated interface. If consumers are not supposed to implement this
      protocol, then [Model] is redundant and will generate code that will never
      be used.
    */
    [Protocol]
    [BaseType(typeof(NSObject))]
    interface MSColorView
    {
        [Wrap("WeakDelegate")]
        MSColorViewDelegate Delegate { get; set; }

        // @required @property (nonatomic, weak) id<MSColorViewDelegate> delegate;
        [Abstract]
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
        NSObject WeakDelegate { get; set; }

        // @required @property (nonatomic, strong) UIColor * color;
        [Abstract]
        [Export("color", ArgumentSemantic.Strong)]
        UIColor Color { get; set; }
    }

    // @protocol MSColorViewDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MSColorViewDelegate
    {
        // @required -(void)colorView:(id<MSColorView>)colorView didChangeColor:(UIColor *)color;
        [Abstract]
        [Export("colorView:didChangeColor:")]
        void DidChangeColor(MSColorView colorView, UIColor color);
    }

    // @interface MSColorSelectionView : UIView <MSColorView>
    [BaseType(typeof(UIView))]
    interface MSColorSelectionView : MSColorView
    {
        // @property (readonly, assign, nonatomic) MSSelectedColorView selectedIndex;
        [Export("selectedIndex", ArgumentSemantic.Assign)]
        int SelectedIndex { get; }

        // -(void)setSelectedIndex:(MSSelectedColorView)index animated:(BOOL)animated;
        [Export("setSelectedIndex:animated:")]
        void SetSelectedIndex(int index, bool animated);
    }

    // @interface MSColorWheelView : UIControl
    [BaseType(typeof(UIControl))]
    interface MSColorWheelView
    {
        // @property (assign, nonatomic) CGFloat hue;
        [Export("hue")]
        nfloat Hue { get; set; }

        // @property (assign, nonatomic) CGFloat saturation;
        [Export("saturation")]
        nfloat Saturation { get; set; }
    }

    // @interface MSHSBView : UIView <MSColorView>
    [BaseType(typeof(UIView))]
    interface MSHSBView : MSColorView
    {
    }

    // @interface MSRGBView : UIView <MSColorView>
    [BaseType(typeof(UIView))]
    interface MSRGBView : MSColorView
    {
    }

    // @interface MSSliderView : UIControl
    [BaseType(typeof(UIControl))]
    interface MSSliderView
    {
        // @property (assign, nonatomic) CGFloat value;
        [Export("value")]
        nfloat Value { get; set; }

        // @property (assign, nonatomic) CGFloat minimumValue;
        [Export("minimumValue")]
        nfloat MinimumValue { get; set; }

        // @property (assign, nonatomic) CGFloat maximumValue;
        [Export("maximumValue")]
        nfloat MaximumValue { get; set; }

        // -(void)setColors:(NSArray *)colors __attribute__((nonnull(1)));
        [Export("setColors:")]
        void SetColors(NSObject[] colors);
    }

    // @interface MSThumbView : UIControl
    [BaseType(typeof(UIControl))]
    interface MSThumbView
    {
        // @property (readonly, nonatomic, strong) UIGestureRecognizer * gestureRecognizer;
        [Export("gestureRecognizer", ArgumentSemantic.Strong)]
        UIGestureRecognizer GestureRecognizer { get; }
    }
}